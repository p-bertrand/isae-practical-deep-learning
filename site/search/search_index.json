{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Session Pratique: Apprentissage Profond pour la vision par ordinateur \u00b6 Ce site web contient la documentation et un guide pour le TP du 13 Novembre 2018 \u00e0 l'ISAE-SUPAERO dans le cadre de la fili\u00e8re Science des Donn\u00e9es & D\u00e9cision. La documentation sera r\u00e9dig\u00e9e en fran\u00e7ais avec quelques incursions d'anglais (notamment pour la documentation du code) et de franglais. L'objectif g\u00e9n\u00e9ral de la session est d'appliquer dans un contexte pratique, des r\u00e9seaux de neurones convolutifs ( ouch ) aussi appel\u00e9s Convolutionnal Neural Network ou CNNs dans le cadre de la d\u00e9tection d'avion dans des images satellites .","title":"Home"},{"location":"#session-pratique-apprentissage-profond-pour-la-vision-par-ordinateur","text":"Ce site web contient la documentation et un guide pour le TP du 13 Novembre 2018 \u00e0 l'ISAE-SUPAERO dans le cadre de la fili\u00e8re Science des Donn\u00e9es & D\u00e9cision. La documentation sera r\u00e9dig\u00e9e en fran\u00e7ais avec quelques incursions d'anglais (notamment pour la documentation du code) et de franglais. L'objectif g\u00e9n\u00e9ral de la session est d'appliquer dans un contexte pratique, des r\u00e9seaux de neurones convolutifs ( ouch ) aussi appel\u00e9s Convolutionnal Neural Network ou CNNs dans le cadre de la d\u00e9tection d'avion dans des images satellites .","title":"Session Pratique: Apprentissage Profond pour la vision par ordinateur"},{"location":"1_objectives/","text":"Qu'allons nous faire aujourd'hui ? \u00b6 Objectives \u00b6 Expliquer le but du tp ... \u00b6 ... Final assignment \u00b6 ...","title":"What we are going to do today"},{"location":"1_objectives/#quallons-nous-faire-aujourdhui","text":"","title":"Qu'allons nous faire aujourd'hui ?"},{"location":"1_objectives/#objectives","text":"Expliquer le but du tp","title":"Objectives"},{"location":"1_objectives/#_1","text":"...","title":"..."},{"location":"1_objectives/#final-assignment","text":"...","title":"Final assignment"},{"location":"2_gcp/","text":"Installation GCP \u00b6 Cr\u00e9ation et d\u00e9marrage de l'instance Google Cloud Platform https://console.cloud.google.com/","title":"Setting up your GCP instance"},{"location":"2_gcp/#installation-gcp","text":"Cr\u00e9ation et d\u00e9marrage de l'instance Google Cloud Platform https://console.cloud.google.com/","title":"Installation GCP"},{"location":"2_gcp_backup/","text":"Installation GCP \u00b6 Plan B Quand \u00e7a commence \u00e0 sentir le roussi parce que rien ne marche \u00b6 https://colab.research.google.com/ Plan Z: Quand tout le reste a foir\u00e9... \u00b6 (Il faut avoir acc\u00e8s \u00e0 la console Google Cloud) Cr\u00e9er son instance GCP (avec le tag) Ouvrir les ports 8080 et 8081 sur le firewall GCP Se connecter en ssh sur son instance depuis GCP T\u00e9l\u00e9charger une nouvelle conf jupyter Lancer un jupyter lab sur 8081 Se connecter avec l'IP publique","title":"Installation GCP"},{"location":"2_gcp_backup/#installation-gcp","text":"","title":"Installation GCP"},{"location":"2_gcp_backup/#plan-b-quand-ca-commence-a-sentir-le-roussi-parce-que-rien-ne-marche","text":"https://colab.research.google.com/","title":"Plan B Quand \u00e7a commence \u00e0 sentir le roussi parce que rien ne marche"},{"location":"2_gcp_backup/#plan-z-quand-tout-le-reste-a-foire","text":"(Il faut avoir acc\u00e8s \u00e0 la console Google Cloud) Cr\u00e9er son instance GCP (avec le tag) Ouvrir les ports 8080 et 8081 sur le firewall GCP Se connecter en ssh sur son instance depuis GCP T\u00e9l\u00e9charger une nouvelle conf jupyter Lancer un jupyter lab sur 8081 Se connecter avec l'IP publique","title":"Plan Z: Quand tout le reste a foir\u00e9..."},{"location":"3_khumeia/","text":"Khumeia \u00b6","title":"Khumeia framework in more details"},{"location":"3_khumeia/#khumeia","text":"","title":"Khumeia"},{"location":"4_hands_on/","text":"Hands-on data & framework (jupyter) \u00b6 Get jupyter notebook From your instance you can wget https://github.com/fchouteau/isae-practical-deep-learning/blob/master/notebooks/exploratory_data_analysis.ipynb @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Hands-on data & framework (jupyter)"},{"location":"4_hands_on/#hands-on-data-framework-jupyter","text":"Get jupyter notebook From your instance you can wget https://github.com/fchouteau/isae-practical-deep-learning/blob/master/notebooks/exploratory_data_analysis.ipynb @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Hands-on data &amp; framework (jupyter)"},{"location":"5_generating/","text":"Generating our training sets (jupyter) \u00b6 Get jupyter notebook From your instance you can wget https://github.com/fchouteau/isae-practical-deep-learning/blob/master/notebooks/dataset_generation.ipynb @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Generating our training sets (jupyter)"},{"location":"5_generating/#generating-our-training-sets-jupyter","text":"Get jupyter notebook From your instance you can wget https://github.com/fchouteau/isae-practical-deep-learning/blob/master/notebooks/dataset_generation.ipynb @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Generating our training sets (jupyter)"},{"location":"6_sliders/","text":"Sliders and Samplers \u00b6 Get jupyter notebook @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"optional - Advanced samplers & sliders (jupyter)"},{"location":"6_sliders/#sliders-and-samplers","text":"Get jupyter notebook @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Sliders and Samplers"},{"location":"7_train/","text":"Training your model \u00b6 Get notebook @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Training our model (jupyter)"},{"location":"7_train/#training-your-model","text":"Get notebook @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Training your model"},{"location":"8_predictions/","text":"Runing predictions on large images \u00b6 Get notebook @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Predicting on full satellite images (jupyter)"},{"location":"8_predictions/#runing-predictions-on-large-images","text":"Get notebook @media only screen and (min-width: 76.25em) { .md-content { margin-right: 0; ;} .md-sidebar--secondary { right: 0; margin-left: 0; -webkit-transform: none; transform: none; } } Your browser does not support iframes.","title":"Runing predictions on large images"},{"location":"9_exploration/","text":"Pour aller plus loin \u00b6 ....","title":"optional - Going further"},{"location":"9_exploration/#pour-aller-plus-loin","text":"....","title":"Pour aller plus loin"},{"location":"khumeia.data.dataset/","text":"Source: khumeia/data/dataset.py#L0 TilesDataset \u00b6 A tiles dataset is a container for \"tiles\" on items It is used to apply sliding windows on full images to generate candidates of tiles then a list of tiles is sampled with certains rules this list is then dumped in .jpg in a keras.ImageDataGenerator compatible format (/label_n/ folders with images) TilesDataset. __init__ \u00b6 __init__ ( self , items ) Initialise the TilesDataset with the satellite images to parse Args: items (list[Item])): the list of items in the dataset TilesDataset.generate_candidates_tiles \u00b6 generate_candidates_tiles ( self , sliding_windows ) Apply a sliding window over each satellite image to generate a list of tiles (= regions of interest) to sample from Args: sliding_windows (list[SlidingWindow]|SlidingWindow): Returns: in place (assign self.candidate_tiles) TilesDataset.generate_tiles_dataset \u00b6 generate_tiles_dataset ( self , output_dir = None , save_format = \"jpg\" , remove_first = True ) Actually generates training images from the dataset.sampled_tiles (= regions of interest) The filestructure is compatible with keras.ImageDataGenerator.flow_from_directory() method For more information on how to parse this, check this script: https : //gist.github.com/fchollet/0830affa1f7f19fd47b06d4cf89ed44d In summary, this is our directory structure: output_dir/ aircrafts/ ac001.jpg ac002.jpg ... background/ bg001.jpg bg002.jpg ... Args: output_dir (str): the output path save_format : \"jpg\" the image format remove_first (bool): erase output dir first? Returns: TilesDataset.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , tiles_samplers ) Apply a sampler over each satellite image's candidate tiles to generate a list of tiles (= regions of interest) Args: tiles_samplers (list[TilesSampler]|TilesSampler): Returns: in place. assign self.sampled_tiles","title":"Khumeia.data.dataset"},{"location":"khumeia.data.dataset/#tilesdataset","text":"A tiles dataset is a container for \"tiles\" on items It is used to apply sliding windows on full images to generate candidates of tiles then a list of tiles is sampled with certains rules this list is then dumped in .jpg in a keras.ImageDataGenerator compatible format (/label_n/ folders with images)","title":"TilesDataset"},{"location":"khumeia.data.dataset/#tilesdataset__init__","text":"__init__ ( self , items ) Initialise the TilesDataset with the satellite images to parse Args: items (list[Item])): the list of items in the dataset","title":"TilesDataset.__init__"},{"location":"khumeia.data.dataset/#tilesdatasetgenerate_candidates_tiles","text":"generate_candidates_tiles ( self , sliding_windows ) Apply a sliding window over each satellite image to generate a list of tiles (= regions of interest) to sample from Args: sliding_windows (list[SlidingWindow]|SlidingWindow): Returns: in place (assign self.candidate_tiles)","title":"TilesDataset.generate_candidates_tiles"},{"location":"khumeia.data.dataset/#tilesdatasetgenerate_tiles_dataset","text":"generate_tiles_dataset ( self , output_dir = None , save_format = \"jpg\" , remove_first = True ) Actually generates training images from the dataset.sampled_tiles (= regions of interest) The filestructure is compatible with keras.ImageDataGenerator.flow_from_directory() method For more information on how to parse this, check this script: https : //gist.github.com/fchollet/0830affa1f7f19fd47b06d4cf89ed44d In summary, this is our directory structure: output_dir/ aircrafts/ ac001.jpg ac002.jpg ... background/ bg001.jpg bg002.jpg ... Args: output_dir (str): the output path save_format : \"jpg\" the image format remove_first (bool): erase output dir first? Returns:","title":"TilesDataset.generate_tiles_dataset"},{"location":"khumeia.data.dataset/#tilesdatasetsample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , tiles_samplers ) Apply a sampler over each satellite image's candidate tiles to generate a list of tiles (= regions of interest) Args: tiles_samplers (list[TilesSampler]|TilesSampler): Returns: in place. assign self.sampled_tiles","title":"TilesDataset.sample_tiles_from_candidates"},{"location":"khumeia.data.item/","text":"Source: khumeia/data/item.py#L0 Item \u00b6 An item is a container Item.key \u00b6 Returns: SatelliteImage \u00b6 Contains the necessary information to define a satellite images Contains image id, image file and label file Contains image and labels as properties (cached via joblib to avoid loading the same image n times and to avoid ram overflow) The labels are automatically parsed as BoundingBoxes SatelliteImage.image \u00b6 Read image data (wrapper around skimage.imread) Returns: np.ndarray: the image data as a int8 (h,w,3) np.ndarray SatelliteImage.key \u00b6 An unique identifier of the Item class used to for matching Returns: str : the image_id SatelliteImage.labels \u00b6 Get the labels of a satellite image (load json and decode labels) Returns: list (Groundtruth): A list of bounding boxes corresponding to the labels SatelliteImage.shape \u00b6 Get the shape of the array (wrapper around self.image.shape) Returns: tuple : h,w,c SatelliteImage. __init__ \u00b6 __init__ ( self , image_id , image_file , label_file ) Args: image_id : the image identifier (generally the filename...) image_file : path to the .jpg image file label_file : path to the .json label file SatelliteImage.from_image_id_and_path \u00b6 from_image_id_and_path ( cls , image_id , path = None ) Args: image_id : the filename path : the root directory to parse when looking for .jpg and .json files Returns: SatelliteImage.list_items_from_path \u00b6 list_items_from_path ( cls , path = None ) Get a list of Satellite Images items from path Args: path : folder where to look Returns: list (SatelliteImageItem):","title":"Khumeia.data.item"},{"location":"khumeia.data.item/#item","text":"An item is a container","title":"Item"},{"location":"khumeia.data.item/#itemkey","text":"Returns:","title":"Item.key"},{"location":"khumeia.data.item/#satelliteimage","text":"Contains the necessary information to define a satellite images Contains image id, image file and label file Contains image and labels as properties (cached via joblib to avoid loading the same image n times and to avoid ram overflow) The labels are automatically parsed as BoundingBoxes","title":"SatelliteImage"},{"location":"khumeia.data.item/#satelliteimageimage","text":"Read image data (wrapper around skimage.imread) Returns: np.ndarray: the image data as a int8 (h,w,3) np.ndarray","title":"SatelliteImage.image"},{"location":"khumeia.data.item/#satelliteimagekey","text":"An unique identifier of the Item class used to for matching Returns: str : the image_id","title":"SatelliteImage.key"},{"location":"khumeia.data.item/#satelliteimagelabels","text":"Get the labels of a satellite image (load json and decode labels) Returns: list (Groundtruth): A list of bounding boxes corresponding to the labels","title":"SatelliteImage.labels"},{"location":"khumeia.data.item/#satelliteimageshape","text":"Get the shape of the array (wrapper around self.image.shape) Returns: tuple : h,w,c","title":"SatelliteImage.shape"},{"location":"khumeia.data.item/#satelliteimage__init__","text":"__init__ ( self , image_id , image_file , label_file ) Args: image_id : the image identifier (generally the filename...) image_file : path to the .jpg image file label_file : path to the .json label file","title":"SatelliteImage.__init__"},{"location":"khumeia.data.item/#satelliteimagefrom_image_id_and_path","text":"from_image_id_and_path ( cls , image_id , path = None ) Args: image_id : the filename path : the root directory to parse when looking for .jpg and .json files Returns:","title":"SatelliteImage.from_image_id_and_path"},{"location":"khumeia.data.item/#satelliteimagelist_items_from_path","text":"list_items_from_path ( cls , path = None ) Get a list of Satellite Images items from path Args: path : folder where to look Returns: list (SatelliteImageItem):","title":"SatelliteImage.list_items_from_path"},{"location":"khumeia.data.sampler/","text":"Source: khumeia/data/sampler.py#L0 TilesSampler \u00b6 A Sampler takes as input a list of tiles and outputs a transformed list of tiles, after application of a sampling logic. See https://en.wikipedia.org/wiki/Sampling_(statistics) Writing our own sampler: You have to write sample_tiles_from_candidates(self, candidate_tiles) Example: make use of the list filters utils ```python from khumeia.utils import list_utils def sample_tiles_from_candidates(self, candidate_tiles): sampled_tiles = [] item_keys = list_utils.get_items_in_list(candidate_tiles) for item_key in item_keys: candidate_tiles_ = list_utils.filter_tiles_by_item(candidate_tiles, item_key) if self.target_label is not None: candidate_tiles_ = list_utils.filter_tiles_by_label(candidate_tiles_, self.target_label) nb_tiles_max = int((self.nb_tiles_max or len(candidate_tiles_)) / len(item_keys)) sampled_tiles.extend(self. sample_n_tiles_from_list(candidate_tiles , nb_tiles_max)) return sampled_tiles ``` TilesSampler. __init__ \u00b6 __init__ ( self , with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first TilesSampler.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list RandomSampler \u00b6 Samples randomly at most nb_tiles_max tiles from the candidates pool If with_replacement is activated, exactly nb_tiles_max Note: you can target a specific label for extracting only n images from this label This is useful if you want to stratify manually instead of using more complex samplers RandomSampler. __init__ \u00b6 __init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True , target_label = None ) Args: nb_tiles_max (int): target_label (str|None): Allow targeting a specific label RandomSampler.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list RandomPerItemSampler \u00b6 Samples randomly at most nb_tiles_max tiles from the candidates pool If with_replacement is activated, exactly nb_tiles_max Ensures that at most nb_tiles_max/nb_items tiles are sampled per item Note: you can target a specific label for extracting only n tiles from this label. This is useful if you want to stratify manually instead of using more complex samplers RandomPerItemSampler. __init__ \u00b6 __init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True , target_label = None ) Args: nb_tiles_max (int): target_label (str|None): Allow targeting a specific label RandomPerItemSampler.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list StratifiedSampler \u00b6 Samples randomly at most nb_tiles_max tiles from the candidates pool Tries to balance labels (globally) to the limit of the number of available tiles / label If with_replacement, ensure that a balanced sample is exactly attained StratifiedSampler. __init__ \u00b6 __init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first StratifiedSampler.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list StratifiedPerItemSampler \u00b6 Samples randomly at most nb_tiles_max tiles from the candidates pool Tries to balance labels (globally) to the limit of the number of available tiles / label / item If with_replacement, ensure that a balanced sample is exactly attained StratifiedPerItemSampler. __init__ \u00b6 __init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first StratifiedPerItemSampler.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list BackgroundToPositiveRatioSampler \u00b6 Samples randomly nb_positive_tiles_max in non background classes, - while balancing items Then samples background_to_positive_ratio * nb_positive_tiles_max in background tiles BackgroundToPositiveRatioSampler. __init__ \u00b6 __init__ ( self , background_to_positive_ratio = 1 , nb_positive_tiles_max = None , \\ with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first BackgroundToPositiveRatioSampler.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list BackgroundToPositiveRatioPerItemSampler \u00b6 Samples randomly nb_positive_tiles_max in non background classes, - while balancing items Then samples background_to_positive_ratio * nb_positive_tiles_max in background tiles Do it per item BackgroundToPositiveRatioPerItemSampler. __init__ \u00b6 __init__ ( self , background_to_positive_ratio = 1 , nb_positive_tiles_max = None , \\ with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first BackgroundToPositiveRatioPerItemSampler.sample_tiles_from_candidates \u00b6 sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"Khumeia.data.sampler"},{"location":"khumeia.data.sampler/#tilessampler","text":"A Sampler takes as input a list of tiles and outputs a transformed list of tiles, after application of a sampling logic. See https://en.wikipedia.org/wiki/Sampling_(statistics) Writing our own sampler: You have to write sample_tiles_from_candidates(self, candidate_tiles) Example: make use of the list filters utils ```python from khumeia.utils import list_utils def sample_tiles_from_candidates(self, candidate_tiles): sampled_tiles = [] item_keys = list_utils.get_items_in_list(candidate_tiles) for item_key in item_keys: candidate_tiles_ = list_utils.filter_tiles_by_item(candidate_tiles, item_key) if self.target_label is not None: candidate_tiles_ = list_utils.filter_tiles_by_label(candidate_tiles_, self.target_label) nb_tiles_max = int((self.nb_tiles_max or len(candidate_tiles_)) / len(item_keys)) sampled_tiles.extend(self. sample_n_tiles_from_list(candidate_tiles , nb_tiles_max)) return sampled_tiles ```","title":"TilesSampler"},{"location":"khumeia.data.sampler/#tilessampler__init__","text":"__init__ ( self , with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first","title":"TilesSampler.__init__"},{"location":"khumeia.data.sampler/#tilessamplersample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"TilesSampler.sample_tiles_from_candidates"},{"location":"khumeia.data.sampler/#randomsampler","text":"Samples randomly at most nb_tiles_max tiles from the candidates pool If with_replacement is activated, exactly nb_tiles_max Note: you can target a specific label for extracting only n images from this label This is useful if you want to stratify manually instead of using more complex samplers","title":"RandomSampler"},{"location":"khumeia.data.sampler/#randomsampler__init__","text":"__init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True , target_label = None ) Args: nb_tiles_max (int): target_label (str|None): Allow targeting a specific label","title":"RandomSampler.__init__"},{"location":"khumeia.data.sampler/#randomsamplersample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"RandomSampler.sample_tiles_from_candidates"},{"location":"khumeia.data.sampler/#randomperitemsampler","text":"Samples randomly at most nb_tiles_max tiles from the candidates pool If with_replacement is activated, exactly nb_tiles_max Ensures that at most nb_tiles_max/nb_items tiles are sampled per item Note: you can target a specific label for extracting only n tiles from this label. This is useful if you want to stratify manually instead of using more complex samplers","title":"RandomPerItemSampler"},{"location":"khumeia.data.sampler/#randomperitemsampler__init__","text":"__init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True , target_label = None ) Args: nb_tiles_max (int): target_label (str|None): Allow targeting a specific label","title":"RandomPerItemSampler.__init__"},{"location":"khumeia.data.sampler/#randomperitemsamplersample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"RandomPerItemSampler.sample_tiles_from_candidates"},{"location":"khumeia.data.sampler/#stratifiedsampler","text":"Samples randomly at most nb_tiles_max tiles from the candidates pool Tries to balance labels (globally) to the limit of the number of available tiles / label If with_replacement, ensure that a balanced sample is exactly attained","title":"StratifiedSampler"},{"location":"khumeia.data.sampler/#stratifiedsampler__init__","text":"__init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first","title":"StratifiedSampler.__init__"},{"location":"khumeia.data.sampler/#stratifiedsamplersample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"StratifiedSampler.sample_tiles_from_candidates"},{"location":"khumeia.data.sampler/#stratifiedperitemsampler","text":"Samples randomly at most nb_tiles_max tiles from the candidates pool Tries to balance labels (globally) to the limit of the number of available tiles / label / item If with_replacement, ensure that a balanced sample is exactly attained","title":"StratifiedPerItemSampler"},{"location":"khumeia.data.sampler/#stratifiedperitemsampler__init__","text":"__init__ ( self , nb_tiles_max = None , with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first","title":"StratifiedPerItemSampler.__init__"},{"location":"khumeia.data.sampler/#stratifiedperitemsamplersample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"StratifiedPerItemSampler.sample_tiles_from_candidates"},{"location":"khumeia.data.sampler/#backgroundtopositiveratiosampler","text":"Samples randomly nb_positive_tiles_max in non background classes, - while balancing items Then samples background_to_positive_ratio * nb_positive_tiles_max in background tiles","title":"BackgroundToPositiveRatioSampler"},{"location":"khumeia.data.sampler/#backgroundtopositiveratiosampler__init__","text":"__init__ ( self , background_to_positive_ratio = 1 , nb_positive_tiles_max = None , \\ with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first","title":"BackgroundToPositiveRatioSampler.__init__"},{"location":"khumeia.data.sampler/#backgroundtopositiveratiosamplersample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"BackgroundToPositiveRatioSampler.sample_tiles_from_candidates"},{"location":"khumeia.data.sampler/#backgroundtopositiveratioperitemsampler","text":"Samples randomly nb_positive_tiles_max in non background classes, - while balancing items Then samples background_to_positive_ratio * nb_positive_tiles_max in background tiles Do it per item","title":"BackgroundToPositiveRatioPerItemSampler"},{"location":"khumeia.data.sampler/#backgroundtopositiveratioperitemsampler__init__","text":"__init__ ( self , background_to_positive_ratio = 1 , nb_positive_tiles_max = None , \\ with_replacement = False , shuffle = True ) Args: with_replacement (bool): We will sample with replacement shuffle (bool): Shuffle the input list of tiles first","title":"BackgroundToPositiveRatioPerItemSampler.__init__"},{"location":"khumeia.data.sampler/#backgroundtopositiveratioperitemsamplersample_tiles_from_candidates","text":"sample_tiles_from_candidates ( self , candidate_tiles ) Apply the sampling logic of this class to a list of candidates Args: candidate_tiles (list[Tiles]): List of regions of interest to apply the sampler on Returns: list[Tiles]: Sampled list","title":"BackgroundToPositiveRatioPerItemSampler.sample_tiles_from_candidates"},{"location":"khumeia.data.sliding_window/","text":"Source: khumeia/data/sliding_window.py#L0 SlidingWindow \u00b6 Sample cutouts of a sliding window iterating from top to bottom (Imagery Courtesy of DigitalGlobe) Sliding window shown iterating across an image (left). An image classifier is applied to these cutouts and anything resembling a boat is saved as a positive (right) (Imagery Courtesy of DigitalGlobe) SlidingWindow. __init__ \u00b6 __init__ ( self , tile_size = 64 , padding = 0 , stride = 64 , discard_background = False , \\ label_assignment_mode = \"center\" , intersection_over_area_threshold = 0.5 , \\ data_transform_fn = None ) Args: tile_size : padding : stride : discard_background : label_assignment_mode : intersection_over_area_threshold : data_transform_fn : SlidingWindow.get_tiles_for_item \u00b6 get_tiles_for_item ( self , item ) Args: item : Returns:","title":"Khumeia.data.sliding window"},{"location":"khumeia.data.sliding_window/#slidingwindow","text":"Sample cutouts of a sliding window iterating from top to bottom (Imagery Courtesy of DigitalGlobe) Sliding window shown iterating across an image (left). An image classifier is applied to these cutouts and anything resembling a boat is saved as a positive (right) (Imagery Courtesy of DigitalGlobe)","title":"SlidingWindow"},{"location":"khumeia.data.sliding_window/#slidingwindow__init__","text":"__init__ ( self , tile_size = 64 , padding = 0 , stride = 64 , discard_background = False , \\ label_assignment_mode = \"center\" , intersection_over_area_threshold = 0.5 , \\ data_transform_fn = None ) Args: tile_size : padding : stride : discard_background : label_assignment_mode : intersection_over_area_threshold : data_transform_fn :","title":"SlidingWindow.__init__"},{"location":"khumeia.data.sliding_window/#slidingwindowget_tiles_for_item","text":"get_tiles_for_item ( self , item ) Args: item : Returns:","title":"SlidingWindow.get_tiles_for_item"},{"location":"khumeia.inference.engine/","text":"Source: khumeia/inference/engine.py#L0 InferenceEngine \u00b6 InferenceEngine. __init__ \u00b6 __init__ ( self , items ) Initialize self. See help(type(self)) for accurate signature. InferenceEngine.predict_on_item \u00b6 predict_on_item ( item , predictor = None , sliding_windows = None ) InferenceEngine.predict_on_items \u00b6 predict_on_items ( self , predictor = None , sliding_windows = None )","title":"Khumeia.inference.engine"},{"location":"khumeia.inference.engine/#inferenceengine","text":"","title":"InferenceEngine"},{"location":"khumeia.inference.engine/#inferenceengine__init__","text":"__init__ ( self , items ) Initialize self. See help(type(self)) for accurate signature.","title":"InferenceEngine.__init__"},{"location":"khumeia.inference.engine/#inferenceenginepredict_on_item","text":"predict_on_item ( item , predictor = None , sliding_windows = None )","title":"InferenceEngine.predict_on_item"},{"location":"khumeia.inference.engine/#inferenceenginepredict_on_items","text":"predict_on_items ( self , predictor = None , sliding_windows = None )","title":"InferenceEngine.predict_on_items"},{"location":"khumeia.inference.metrics/","text":"Source: khumeia/inference/metrics.py#L0 Metric \u00b6","title":"Khumeia.inference.metrics"},{"location":"khumeia.inference.metrics/#metric","text":"","title":"Metric"},{"location":"khumeia.inference.predictor/","text":"Source: khumeia/inference/predictor.py#L0 Predictor \u00b6 A predictor is simply a wrapper over a model to predict aircraft or background FN predict_on_tile should return either [aircraft or background] use init to load your model ! It supports batching if you set your batch_size as > 1 (it will then call predict_on_tiles ) Predictor. __init__ \u00b6 __init__ ( self , batch_size = 1 ) Initialize self. See help(type(self)) for accurate signature. Predictor.predict \u00b6 predict ( self , tile_data ) receives a numpy array, returns the label Args: tile_data (np.ndarray): Returns: \"aircraft\" or \"background\" Predictor.predict_on_batch \u00b6 predict_on_batch ( self , tiles_data ) If you want to implement batching Args: tiles_data (list[np.ndarray]): A list of images Returns: A list of labels \"aircraft\" or \"background\"","title":"Khumeia.inference.predictor"},{"location":"khumeia.inference.predictor/#predictor","text":"A predictor is simply a wrapper over a model to predict aircraft or background FN predict_on_tile should return either [aircraft or background] use init to load your model ! It supports batching if you set your batch_size as > 1 (it will then call predict_on_tiles )","title":"Predictor"},{"location":"khumeia.inference.predictor/#predictor__init__","text":"__init__ ( self , batch_size = 1 ) Initialize self. See help(type(self)) for accurate signature.","title":"Predictor.__init__"},{"location":"khumeia.inference.predictor/#predictorpredict","text":"predict ( self , tile_data ) receives a numpy array, returns the label Args: tile_data (np.ndarray): Returns: \"aircraft\" or \"background\"","title":"Predictor.predict"},{"location":"khumeia.inference.predictor/#predictorpredict_on_batch","text":"predict_on_batch ( self , tiles_data ) If you want to implement batching Args: tiles_data (list[np.ndarray]): A list of images Returns: A list of labels \"aircraft\" or \"background\"","title":"Predictor.predict_on_batch"},{"location":"khumeia.roi.bounding_box/","text":"Source: khumeia/roi/bounding_box.py#L0 BoundingBox \u00b6 Base bbox class BoundingBox.area \u00b6 Returns: BoundingBox.center \u00b6 Returns: BoundingBox.key \u00b6 BoundingBox.x_max \u00b6 Returns: BoundingBox.y_max \u00b6 Returns: BoundingBox. __init__ \u00b6 __init__ ( self , x_min , y_min , height , width ) Args: x_min : y_min : height : width : BoundingBox.contains \u00b6 contains ( self , bbox ) Args: bbox : Returns: BoundingBox.contains_point \u00b6 contains_point ( self , point , strict = False ) Args: point : strict : Returns: BoundingBox.from_bounds \u00b6 from_bounds ( cls , x_min , y_min , x_max , y_max ) Args: x_min : y_min : x_max : y_max : Returns: BoundingBox.intersection \u00b6 intersection ( self , bbox ) Args: bbox : Returns: BoundingBox.intersects \u00b6 intersects ( self , bbox ) Args: bbox : Returns: BoundingBox.iou \u00b6 iou ( self , bbox ) Args: bbox : Returns: BoundingBox.translate \u00b6 translate ( self , x_off , y_off ) Args: x_off : y_off : Returns:","title":"Khumeia.roi.bounding box"},{"location":"khumeia.roi.bounding_box/#boundingbox","text":"Base bbox class","title":"BoundingBox"},{"location":"khumeia.roi.bounding_box/#boundingboxarea","text":"Returns:","title":"BoundingBox.area"},{"location":"khumeia.roi.bounding_box/#boundingboxcenter","text":"Returns:","title":"BoundingBox.center"},{"location":"khumeia.roi.bounding_box/#boundingboxkey","text":"","title":"BoundingBox.key"},{"location":"khumeia.roi.bounding_box/#boundingboxx_max","text":"Returns:","title":"BoundingBox.x_max"},{"location":"khumeia.roi.bounding_box/#boundingboxy_max","text":"Returns:","title":"BoundingBox.y_max"},{"location":"khumeia.roi.bounding_box/#boundingbox__init__","text":"__init__ ( self , x_min , y_min , height , width ) Args: x_min : y_min : height : width :","title":"BoundingBox.__init__"},{"location":"khumeia.roi.bounding_box/#boundingboxcontains","text":"contains ( self , bbox ) Args: bbox : Returns:","title":"BoundingBox.contains"},{"location":"khumeia.roi.bounding_box/#boundingboxcontains_point","text":"contains_point ( self , point , strict = False ) Args: point : strict : Returns:","title":"BoundingBox.contains_point"},{"location":"khumeia.roi.bounding_box/#boundingboxfrom_bounds","text":"from_bounds ( cls , x_min , y_min , x_max , y_max ) Args: x_min : y_min : x_max : y_max : Returns:","title":"BoundingBox.from_bounds"},{"location":"khumeia.roi.bounding_box/#boundingboxintersection","text":"intersection ( self , bbox ) Args: bbox : Returns:","title":"BoundingBox.intersection"},{"location":"khumeia.roi.bounding_box/#boundingboxintersects","text":"intersects ( self , bbox ) Args: bbox : Returns:","title":"BoundingBox.intersects"},{"location":"khumeia.roi.bounding_box/#boundingboxiou","text":"iou ( self , bbox ) Args: bbox : Returns:","title":"BoundingBox.iou"},{"location":"khumeia.roi.bounding_box/#boundingboxtranslate","text":"translate ( self , x_off , y_off ) Args: x_off : y_off : Returns:","title":"BoundingBox.translate"},{"location":"khumeia.roi.groundtruth/","text":"Source: khumeia/roi/groundtruth.py#L0 Groundtruth \u00b6 A bbox with a label. Used to represent objects Groundtruth.area \u00b6 Returns: Groundtruth.center \u00b6 Returns: Groundtruth.key \u00b6 Groundtruth.x_max \u00b6 Returns: Groundtruth.y_max \u00b6 Returns: Groundtruth. __init__ \u00b6 __init__ ( self , x_min , y_min , width , height , label ) Args: x_min : y_min : width : height : label :","title":"Khumeia.roi.groundtruth"},{"location":"khumeia.roi.groundtruth/#groundtruth","text":"A bbox with a label. Used to represent objects","title":"Groundtruth"},{"location":"khumeia.roi.groundtruth/#groundtrutharea","text":"Returns:","title":"Groundtruth.area"},{"location":"khumeia.roi.groundtruth/#groundtruthcenter","text":"Returns:","title":"Groundtruth.center"},{"location":"khumeia.roi.groundtruth/#groundtruthkey","text":"","title":"Groundtruth.key"},{"location":"khumeia.roi.groundtruth/#groundtruthx_max","text":"Returns:","title":"Groundtruth.x_max"},{"location":"khumeia.roi.groundtruth/#groundtruthy_max","text":"Returns:","title":"Groundtruth.y_max"},{"location":"khumeia.roi.groundtruth/#groundtruth__init__","text":"__init__ ( self , x_min , y_min , width , height , label ) Args: x_min : y_min : width : height : label :","title":"Groundtruth.__init__"},{"location":"khumeia.roi.tile/","text":"Source: khumeia/roi/tile.py#L0 Tile \u00b6 Tiles are bbox that represend a location on a large image. Functionnaly different than groundtruth Tile.area \u00b6 Returns: Tile.center \u00b6 Returns: Tile.key \u00b6 Tile.padded_bounds \u00b6 Returns: Tile.x_max \u00b6 Returns: Tile.y_max \u00b6 Returns: Tile. __init__ \u00b6 __init__ ( self , item_id , x_min , y_min , width , height , padding = 0 , data_transform_fn = None ) Args: item_id : x_min : y_min : width : height : padding : data_transform_fn : Tile.bboxes_to_absolute_coords \u00b6 bboxes_to_absolute_coords ( self , bboxes ) Args: bboxes : Returns: Tile.bboxes_to_relative_coords \u00b6 bboxes_to_relative_coords ( self , bboxes ) Args: bboxes : Returns: Tile.filter_inside \u00b6 filter_inside ( self , bboxes , to_relative_coordinates = False ) Args: bboxes : to_relative_coordinates : Returns: Tile.get_data \u00b6 get_data ( self , image ) Get the data with padding management from a dataset Note: since padded bounds can go to outside the image height, width, there are calculations to correctly pad the array with zeros Args: image (np.ndarray): Returns: np.ndarray RGB 8 bits from Dataset Tile.get_tiles_for_item \u00b6 get_tiles_for_item ( cls , item_id , im_shape , tile_shape , padding = 0 , stride = 1.0 , offset = ( 0 , 0 ), \\ data_transform_fn = None ) Args: item_id : im_shape : tile_shape : padding : stride : offset : data_transform_fn : If you want to data augment. is applied like this: data = data_transform_fn(data) It can be an imgaug sequence for example... It could be used to resample all windows to the same dimension ! Returns: LabelledTile \u00b6 A tile with label assigned... LabelledTile.area \u00b6 Returns: LabelledTile.center \u00b6 Returns: LabelledTile.key \u00b6 LabelledTile.padded_bounds \u00b6 Returns: LabelledTile.x_max \u00b6 Returns: LabelledTile.y_max \u00b6 Returns: LabelledTile. __init__ \u00b6 __init__ ( self , item_id , x_min , y_min , width , height , padding = 0 , label = None , data_transform_fn = None ) Args: item_id : x_min : y_min : width : height : padding : label : data_transform_fn : LabelledTile.bboxes_to_absolute_coords \u00b6 bboxes_to_absolute_coords ( self , bboxes ) Args: bboxes : Returns: LabelledTile.bboxes_to_relative_coords \u00b6 bboxes_to_relative_coords ( self , bboxes ) Args: bboxes : Returns: LabelledTile.filter_inside \u00b6 filter_inside ( self , bboxes , to_relative_coordinates = False ) Args: bboxes : to_relative_coordinates : Returns: LabelledTile.get_data \u00b6 get_data ( self , image ) Get the data with padding management from a dataset Note: since padded bounds can go to outside the image height, width, there are calculations to correctly pad the array with zeros Args: image (np.ndarray): Returns: np.ndarray RGB 8 bits from Dataset LabelledTile.get_tiles_for_item \u00b6 get_tiles_for_item ( cls , item_id , im_shape , tile_shape , padding = 0 , stride = 1.0 , offset = ( 0 , 0 ), \\ data_transform_fn = None ) Args: item_id : im_shape : tile_shape : padding : stride : offset : data_transform_fn : If you want to data augment. is applied like this: data = data_transform_fn(data) It can be an imgaug sequence for example... It could be used to resample all windows to the same dimension ! Returns: LabelledTile.set_label_from_bboxes_center \u00b6 set_label_from_bboxes_center ( self , bboxes , strict = True ) Center of target inside bbox mode Args: bboxes (list[Groundtruth]): strict Returns: LabelledTile.set_label_from_bboxes_ioa \u00b6 set_label_from_bboxes_ioa ( self , bboxes , ioa_threshold = 0.0 ) Intersection over area mode Args: bboxes (list[Groundtruth]): ioa_threshold : Returns: PredictionTile \u00b6 A labelled tile that contains a prediction... PredictionTile.area \u00b6 Returns: PredictionTile.center \u00b6 Returns: PredictionTile.is_correct \u00b6 PredictionTile.is_false_negative \u00b6 PredictionTile.is_false_positive \u00b6 PredictionTile.is_true_positive \u00b6 PredictionTile.key \u00b6 PredictionTile.padded_bounds \u00b6 Returns: PredictionTile.x_max \u00b6 Returns: PredictionTile.y_max \u00b6 Returns: PredictionTile. __init__ \u00b6 __init__ ( self , item_id , x_min , y_min , width , height , padding = 0 , predicted_label = None , label = None , \\ data_transform_fn = None ) Args: item_id : x_min : y_min : width : height : padding : label : data_transform_fn : PredictionTile.bboxes_to_absolute_coords \u00b6 bboxes_to_absolute_coords ( self , bboxes ) Args: bboxes : Returns: PredictionTile.bboxes_to_relative_coords \u00b6 bboxes_to_relative_coords ( self , bboxes ) Args: bboxes : Returns: PredictionTile.filter_inside \u00b6 filter_inside ( self , bboxes , to_relative_coordinates = False ) Args: bboxes : to_relative_coordinates : Returns: PredictionTile.from_labelled_tile_and_prediction \u00b6 from_labelled_tile_and_prediction ( cls , labelled_tile , prediction ) PredictionTile.get_data \u00b6 get_data ( self , image ) Get the data with padding management from a dataset Note: since padded bounds can go to outside the image height, width, there are calculations to correctly pad the array with zeros Args: image (np.ndarray): Returns: np.ndarray RGB 8 bits from Dataset PredictionTile.get_tiles_for_item \u00b6 get_tiles_for_item ( cls , item_id , im_shape , tile_shape , padding = 0 , stride = 1.0 , offset = ( 0 , 0 ), \\ data_transform_fn = None ) Args: item_id : im_shape : tile_shape : padding : stride : offset : data_transform_fn : If you want to data augment. is applied like this: data = data_transform_fn(data) It can be an imgaug sequence for example... It could be used to resample all windows to the same dimension ! Returns: PredictionTile.set_label_from_bboxes_center \u00b6 set_label_from_bboxes_center ( self , bboxes , strict = True ) Center of target inside bbox mode Args: bboxes (list[Groundtruth]): strict Returns: PredictionTile.set_label_from_bboxes_ioa \u00b6 set_label_from_bboxes_ioa ( self , bboxes , ioa_threshold = 0.0 ) Intersection over area mode Args: bboxes (list[Groundtruth]): ioa_threshold : Returns:","title":"Khumeia.roi.tile"},{"location":"khumeia.roi.tile/#tile","text":"Tiles are bbox that represend a location on a large image. Functionnaly different than groundtruth","title":"Tile"},{"location":"khumeia.roi.tile/#tilearea","text":"Returns:","title":"Tile.area"},{"location":"khumeia.roi.tile/#tilecenter","text":"Returns:","title":"Tile.center"},{"location":"khumeia.roi.tile/#tilekey","text":"","title":"Tile.key"},{"location":"khumeia.roi.tile/#tilepadded_bounds","text":"Returns:","title":"Tile.padded_bounds"},{"location":"khumeia.roi.tile/#tilex_max","text":"Returns:","title":"Tile.x_max"},{"location":"khumeia.roi.tile/#tiley_max","text":"Returns:","title":"Tile.y_max"},{"location":"khumeia.roi.tile/#tile__init__","text":"__init__ ( self , item_id , x_min , y_min , width , height , padding = 0 , data_transform_fn = None ) Args: item_id : x_min : y_min : width : height : padding : data_transform_fn :","title":"Tile.__init__"},{"location":"khumeia.roi.tile/#tilebboxes_to_absolute_coords","text":"bboxes_to_absolute_coords ( self , bboxes ) Args: bboxes : Returns:","title":"Tile.bboxes_to_absolute_coords"},{"location":"khumeia.roi.tile/#tilebboxes_to_relative_coords","text":"bboxes_to_relative_coords ( self , bboxes ) Args: bboxes : Returns:","title":"Tile.bboxes_to_relative_coords"},{"location":"khumeia.roi.tile/#tilefilter_inside","text":"filter_inside ( self , bboxes , to_relative_coordinates = False ) Args: bboxes : to_relative_coordinates : Returns:","title":"Tile.filter_inside"},{"location":"khumeia.roi.tile/#tileget_data","text":"get_data ( self , image ) Get the data with padding management from a dataset Note: since padded bounds can go to outside the image height, width, there are calculations to correctly pad the array with zeros Args: image (np.ndarray): Returns: np.ndarray RGB 8 bits from Dataset","title":"Tile.get_data"},{"location":"khumeia.roi.tile/#tileget_tiles_for_item","text":"get_tiles_for_item ( cls , item_id , im_shape , tile_shape , padding = 0 , stride = 1.0 , offset = ( 0 , 0 ), \\ data_transform_fn = None ) Args: item_id : im_shape : tile_shape : padding : stride : offset : data_transform_fn : If you want to data augment. is applied like this: data = data_transform_fn(data) It can be an imgaug sequence for example... It could be used to resample all windows to the same dimension ! Returns:","title":"Tile.get_tiles_for_item"},{"location":"khumeia.roi.tile/#labelledtile","text":"A tile with label assigned...","title":"LabelledTile"},{"location":"khumeia.roi.tile/#labelledtilearea","text":"Returns:","title":"LabelledTile.area"},{"location":"khumeia.roi.tile/#labelledtilecenter","text":"Returns:","title":"LabelledTile.center"},{"location":"khumeia.roi.tile/#labelledtilekey","text":"","title":"LabelledTile.key"},{"location":"khumeia.roi.tile/#labelledtilepadded_bounds","text":"Returns:","title":"LabelledTile.padded_bounds"},{"location":"khumeia.roi.tile/#labelledtilex_max","text":"Returns:","title":"LabelledTile.x_max"},{"location":"khumeia.roi.tile/#labelledtiley_max","text":"Returns:","title":"LabelledTile.y_max"},{"location":"khumeia.roi.tile/#labelledtile__init__","text":"__init__ ( self , item_id , x_min , y_min , width , height , padding = 0 , label = None , data_transform_fn = None ) Args: item_id : x_min : y_min : width : height : padding : label : data_transform_fn :","title":"LabelledTile.__init__"},{"location":"khumeia.roi.tile/#labelledtilebboxes_to_absolute_coords","text":"bboxes_to_absolute_coords ( self , bboxes ) Args: bboxes : Returns:","title":"LabelledTile.bboxes_to_absolute_coords"},{"location":"khumeia.roi.tile/#labelledtilebboxes_to_relative_coords","text":"bboxes_to_relative_coords ( self , bboxes ) Args: bboxes : Returns:","title":"LabelledTile.bboxes_to_relative_coords"},{"location":"khumeia.roi.tile/#labelledtilefilter_inside","text":"filter_inside ( self , bboxes , to_relative_coordinates = False ) Args: bboxes : to_relative_coordinates : Returns:","title":"LabelledTile.filter_inside"},{"location":"khumeia.roi.tile/#labelledtileget_data","text":"get_data ( self , image ) Get the data with padding management from a dataset Note: since padded bounds can go to outside the image height, width, there are calculations to correctly pad the array with zeros Args: image (np.ndarray): Returns: np.ndarray RGB 8 bits from Dataset","title":"LabelledTile.get_data"},{"location":"khumeia.roi.tile/#labelledtileget_tiles_for_item","text":"get_tiles_for_item ( cls , item_id , im_shape , tile_shape , padding = 0 , stride = 1.0 , offset = ( 0 , 0 ), \\ data_transform_fn = None ) Args: item_id : im_shape : tile_shape : padding : stride : offset : data_transform_fn : If you want to data augment. is applied like this: data = data_transform_fn(data) It can be an imgaug sequence for example... It could be used to resample all windows to the same dimension ! Returns:","title":"LabelledTile.get_tiles_for_item"},{"location":"khumeia.roi.tile/#labelledtileset_label_from_bboxes_center","text":"set_label_from_bboxes_center ( self , bboxes , strict = True ) Center of target inside bbox mode Args: bboxes (list[Groundtruth]): strict Returns:","title":"LabelledTile.set_label_from_bboxes_center"},{"location":"khumeia.roi.tile/#labelledtileset_label_from_bboxes_ioa","text":"set_label_from_bboxes_ioa ( self , bboxes , ioa_threshold = 0.0 ) Intersection over area mode Args: bboxes (list[Groundtruth]): ioa_threshold : Returns:","title":"LabelledTile.set_label_from_bboxes_ioa"},{"location":"khumeia.roi.tile/#predictiontile","text":"A labelled tile that contains a prediction...","title":"PredictionTile"},{"location":"khumeia.roi.tile/#predictiontilearea","text":"Returns:","title":"PredictionTile.area"},{"location":"khumeia.roi.tile/#predictiontilecenter","text":"Returns:","title":"PredictionTile.center"},{"location":"khumeia.roi.tile/#predictiontileis_correct","text":"","title":"PredictionTile.is_correct"},{"location":"khumeia.roi.tile/#predictiontileis_false_negative","text":"","title":"PredictionTile.is_false_negative"},{"location":"khumeia.roi.tile/#predictiontileis_false_positive","text":"","title":"PredictionTile.is_false_positive"},{"location":"khumeia.roi.tile/#predictiontileis_true_positive","text":"","title":"PredictionTile.is_true_positive"},{"location":"khumeia.roi.tile/#predictiontilekey","text":"","title":"PredictionTile.key"},{"location":"khumeia.roi.tile/#predictiontilepadded_bounds","text":"Returns:","title":"PredictionTile.padded_bounds"},{"location":"khumeia.roi.tile/#predictiontilex_max","text":"Returns:","title":"PredictionTile.x_max"},{"location":"khumeia.roi.tile/#predictiontiley_max","text":"Returns:","title":"PredictionTile.y_max"},{"location":"khumeia.roi.tile/#predictiontile__init__","text":"__init__ ( self , item_id , x_min , y_min , width , height , padding = 0 , predicted_label = None , label = None , \\ data_transform_fn = None ) Args: item_id : x_min : y_min : width : height : padding : label : data_transform_fn :","title":"PredictionTile.__init__"},{"location":"khumeia.roi.tile/#predictiontilebboxes_to_absolute_coords","text":"bboxes_to_absolute_coords ( self , bboxes ) Args: bboxes : Returns:","title":"PredictionTile.bboxes_to_absolute_coords"},{"location":"khumeia.roi.tile/#predictiontilebboxes_to_relative_coords","text":"bboxes_to_relative_coords ( self , bboxes ) Args: bboxes : Returns:","title":"PredictionTile.bboxes_to_relative_coords"},{"location":"khumeia.roi.tile/#predictiontilefilter_inside","text":"filter_inside ( self , bboxes , to_relative_coordinates = False ) Args: bboxes : to_relative_coordinates : Returns:","title":"PredictionTile.filter_inside"},{"location":"khumeia.roi.tile/#predictiontilefrom_labelled_tile_and_prediction","text":"from_labelled_tile_and_prediction ( cls , labelled_tile , prediction )","title":"PredictionTile.from_labelled_tile_and_prediction"},{"location":"khumeia.roi.tile/#predictiontileget_data","text":"get_data ( self , image ) Get the data with padding management from a dataset Note: since padded bounds can go to outside the image height, width, there are calculations to correctly pad the array with zeros Args: image (np.ndarray): Returns: np.ndarray RGB 8 bits from Dataset","title":"PredictionTile.get_data"},{"location":"khumeia.roi.tile/#predictiontileget_tiles_for_item","text":"get_tiles_for_item ( cls , item_id , im_shape , tile_shape , padding = 0 , stride = 1.0 , offset = ( 0 , 0 ), \\ data_transform_fn = None ) Args: item_id : im_shape : tile_shape : padding : stride : offset : data_transform_fn : If you want to data augment. is applied like this: data = data_transform_fn(data) It can be an imgaug sequence for example... It could be used to resample all windows to the same dimension ! Returns:","title":"PredictionTile.get_tiles_for_item"},{"location":"khumeia.roi.tile/#predictiontileset_label_from_bboxes_center","text":"set_label_from_bboxes_center ( self , bboxes , strict = True ) Center of target inside bbox mode Args: bboxes (list[Groundtruth]): strict Returns:","title":"PredictionTile.set_label_from_bboxes_center"},{"location":"khumeia.roi.tile/#predictiontileset_label_from_bboxes_ioa","text":"set_label_from_bboxes_ioa ( self , bboxes , ioa_threshold = 0.0 ) Intersection over area mode Args: bboxes (list[Groundtruth]): ioa_threshold : Returns:","title":"PredictionTile.set_label_from_bboxes_ioa"},{"location":"khumeia.utils.get_data/","text":"Source: khumeia/utils/get_data.py#L0 Global Variables \u00b6 ROOT_URL download_train_data \u00b6 download_train_data ( data_dir = None ) Download the raw training data to data dir and extracts Args: data_dir : Returns: download_eval_data \u00b6 download_eval_data ( data_dir = None ) Download the raw eval data to data dir and extracts Args: data_dir : Returns:","title":"Khumeia.utils.get data"},{"location":"khumeia.utils.get_data/#global-variables","text":"ROOT_URL","title":"Global Variables"},{"location":"khumeia.utils.get_data/#download_train_data","text":"download_train_data ( data_dir = None ) Download the raw training data to data dir and extracts Args: data_dir : Returns:","title":"download_train_data"},{"location":"khumeia.utils.get_data/#download_eval_data","text":"download_eval_data ( data_dir = None ) Download the raw eval data to data dir and extracts Args: data_dir : Returns:","title":"download_eval_data"},{"location":"khumeia.utils.io/","text":"Source: khumeia/utils/io.py#L0 read_aircraft_labels \u00b6 read_aircraft_labels ( labels_file ) imsave \u00b6 imsave ( fname , arr )","title":"Khumeia.utils.io"},{"location":"khumeia.utils.io/#read_aircraft_labels","text":"read_aircraft_labels ( labels_file )","title":"read_aircraft_labels"},{"location":"khumeia.utils.io/#imsave","text":"imsave ( fname , arr )","title":"imsave"},{"location":"khumeia.utils.logger/","text":"Source: khumeia/utils/logger.py#L0","title":"Khumeia.utils.logger"},{"location":"khumeia.visualisation/","text":"Source: khumeia/visualisation.py#L0 draw_bbox_on_image \u00b6 draw_bbox_on_image ( image , bbox , color = ( 0 , 255 , 0 ), thickness = 2 ) Draw one BoundingBox to an image using cv2.rectangle Args: image (np.ndarray): A (h,w,3) 8-bit array representing the image bbox (BoundingBox): color : A tuple (r,g,b) [0,255] thickness (int): A thickness value Returns: The same image but with the bounding box drawn on it draw_bboxes_on_image \u00b6 draw_bboxes_on_image ( image , bboxes , color = ( 0 , 255 , 0 ), thickness = 2 ) Draw one BoundingBox to an image using cv2.rectangle Args: image : bboxes : color : thickness : Returns: draw_item \u00b6 draw_item ( item ) Args: item : Returns: draw_item_with_tiles \u00b6 draw_item_with_tiles ( item , tiles = None ) Args: item : tiles : Returns: draw_item_with_results \u00b6 draw_item_with_results ( item , results = None ) Args: item : results (list[PredictionTile]): Returns:","title":"Khumeia.visualisation"},{"location":"khumeia.visualisation/#draw_bbox_on_image","text":"draw_bbox_on_image ( image , bbox , color = ( 0 , 255 , 0 ), thickness = 2 ) Draw one BoundingBox to an image using cv2.rectangle Args: image (np.ndarray): A (h,w,3) 8-bit array representing the image bbox (BoundingBox): color : A tuple (r,g,b) [0,255] thickness (int): A thickness value Returns: The same image but with the bounding box drawn on it","title":"draw_bbox_on_image"},{"location":"khumeia.visualisation/#draw_bboxes_on_image","text":"draw_bboxes_on_image ( image , bboxes , color = ( 0 , 255 , 0 ), thickness = 2 ) Draw one BoundingBox to an image using cv2.rectangle Args: image : bboxes : color : thickness : Returns:","title":"draw_bboxes_on_image"},{"location":"khumeia.visualisation/#draw_item","text":"draw_item ( item ) Args: item : Returns:","title":"draw_item"},{"location":"khumeia.visualisation/#draw_item_with_tiles","text":"draw_item_with_tiles ( item , tiles = None ) Args: item : tiles : Returns:","title":"draw_item_with_tiles"},{"location":"khumeia.visualisation/#draw_item_with_results","text":"draw_item_with_results ( item , results = None ) Args: item : results (list[PredictionTile]): Returns:","title":"draw_item_with_results"},{"location":"licence/","text":"Attribution-NonCommercial-ShareAlike 4.0 International ======================================================================= Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. l. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. m. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. n. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce, reproduce, and Share Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. Additional offer from the Licensor -- Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter's License You apply. c. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. 1. The Adapter's License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License. 2. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. 3. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"Licence"}]}